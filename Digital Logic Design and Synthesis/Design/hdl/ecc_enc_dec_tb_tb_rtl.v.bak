//
// Test Bench Module Tom_Dan_2_0_lib.ECC_ENC_DEC_tb.ECC_ENC_DEC_tester
//
// Created:
//          by - danbenam.UNKNOWN (L330W513)
//          at - 16:58:35 11/20/2021
//
// Generated by Mentor Graphics' HDL Designer(TM) 2019.2 (Build 5)
//
`resetall
`timescale 1ns/10ps

module ECC_ENC_DEC_tb;

// Local declarations
parameter AMBA_WORD = 32;
parameter AMBA_ADDR_WIDTH = 20;
parameter DATA_WIDTH = 32;

// Internal signal declarations
logic [AMBA_WORD - 1:0]  PADDR;
logic                    penable;
logic                    psel;
logic [AMBA_WORD - 1:0]  PWDATA;
logic                    pwrite;
logic                    clk=1'b0;
logic                    arstn;
logic [AMBA_WORD - 1:0]  PRDATA;
logic [DATA_WIDTH - 1:0] data_out;
logic                    operation_done;
logic                    [1:0]num_of_errors;



always //generate clk (what is the clock frequency & duty cycle in this simulation?)
 #1 clk <= ~clk;
 

ECC_ENC_DEC #(AMBA_WORD,AMBA_ADDR_WIDTH,DATA_WIDTH) U_0(
   .PADDR          (PADDR),
   .PENABLE        (penable),
   .PSEL           (psel),
   .PWDATA         (PWDATA),
   .PWRITE         (pwrite),
   .clk            (clk),
   .arstn          (arstn),
   .PRDATA         (PRDATA),
   .data_out       (data_out),
   .operation_done (operation_done),
   .num_of_errors  (num_of_errors)
);


initial begin
  #2
  arstn<= 0;          //asyncrounsly de-assert asrtn
  #2;  
  arstn<= 1;  
  #2; 
  /*
  //================================================== 8 bit =====================
   //==========Codewidth register===========
   @(posedge clk) begin 
   PADDR <= 8; 
   PWDATA <= 0;        
   psel <= 1; //assert with clk rising edge
   pwrite <= 1;
 end
  #2;
  @(posedge clk) begin
    penable <= 1;         
  end 
  #2;
  @(posedge clk) begin
    penable <= 0;
    psel <= 0;
    pwrite <= 0;
  end
  #2
  
   //==========Control register===========
   @(posedge clk) begin 
   PADDR <= 0; 
   PWDATA <= 2;        
   psel <= 1; //assert with clk rising edge
   pwrite <= 1;
 end
  #2;
  @(posedge clk) begin
    penable <= 1;         
  end 
  #2;
  @(posedge clk) begin
    penable <= 0;
    psel <= 0;
    pwrite <= 0;
  end
  #2
   //==========NOISE register===========
   @(posedge clk) begin 
   PADDR <= 8'h0c; 
   PWDATA <= 8'h30;        
   psel <= 1; //assert with clk rising edge
   pwrite <= 1;
 end
  #2;
  @(posedge clk) begin
    penable <= 1;         
  end 
  #2;
  @(posedge clk) begin
    penable <= 0;
    psel <= 0;
    pwrite <= 0;
  end
  #2
  //==========Data In===========
   @(posedge clk) begin 
   PADDR <= 4;  
   PWDATA <= 4'b1110;
   psel <= 1; //assert with clk rising edge
   pwrite <= 1;
 end
  #2;
  @(posedge clk) begin
    penable <= 1;         
  end 
  #2;
  @(posedge clk) begin
    penable <= 0;
    psel <= 0;
    pwrite <= 0;
  end
  #2;
   //==========NOISE register===========
   @(posedge clk) begin 
   PADDR <= 8'h0c; 
   PWDATA <= 8'h10;        
   psel <= 1; //assert with clk rising edge
   pwrite <= 1;
 end
  #2;
  @(posedge clk) begin
    penable <= 1;         
  end 
  #2;
  @(posedge clk) begin
    penable <= 0;
    psel <= 0;
    pwrite <= 0;
  end
  #2
  //==========read===========
   @(posedge clk) begin 
   PADDR <= 12; 
   psel <= 1; //assert with clk rising edge
   pwrite <= 0;
 end
  #2;
  @(posedge clk) begin
    penable <= 1;         
  end 
  #2;
  @(posedge clk) begin
    penable <= 0;
    psel <= 0;
    pwrite <= 0;
  end
  #2;
  
  
  
  
  #10; //================================================== 16 bit =====================
   //==========Codewidth register===========
   @(posedge clk) begin 
   PADDR <= 8; 
   PWDATA <= 1;        
   psel <= 1; //assert with clk rising edge
   pwrite <= 1;
 end
  #2;
  @(posedge clk) begin
    penable <= 1;         
  end 
  #2;
  @(posedge clk) begin
    penable <= 0;
    psel <= 0;
    pwrite <= 0;
  end
  #2;
  
   //==========Control register===========
   @(posedge clk) begin 
   PADDR <= 0; 
   PWDATA <= 2;        
   psel <= 1; //assert with clk rising edge
   pwrite <= 1;
 end
  #2;
  @(posedge clk) begin
    penable <= 1;         
  end 
  #2;
  @(posedge clk) begin
    penable <= 0;
    psel <= 0;
    pwrite <= 0;
  end
  #2;
   //==========NOISE register===========
   @(posedge clk) begin 
   PADDR <= 8'h0c; 
   PWDATA <= 16'h0800;        
   psel <= 1; //assert with clk rising edge
   pwrite <= 1;
 end
  #2;
  @(posedge clk) begin
    penable <= 1;         
  end 
  #2;
  @(posedge clk) begin
    penable <= 0;
    psel <= 0;
    pwrite <= 0;
  end
  #2;
  //==========Data In===========
   @(posedge clk) begin 
   PADDR <= 4;  
   PWDATA <= 11'hc4;
   psel <= 1; //assert with clk rising edge
   pwrite <= 1;
 end
  #2;
  @(posedge clk) begin
    penable <= 1;         
  end 
  #2;
  @(posedge clk) begin
    penable <= 0;
    psel <= 0;
    pwrite <= 0;
  end
  #2;
  //==========read===========
   @(posedge clk) begin 
   PADDR <= 8; 
   psel <= 1; //assert with clk rising edge
   pwrite <= 0;
 end
  #2;
  @(posedge clk) begin
    penable <= 1;         
  end 
  #2;
  @(posedge clk) begin
    penable <= 0;
    psel <= 0;
    pwrite <= 0;
  end
  #2;
   //==========NOISE register===========
   @(posedge clk) begin 
   PADDR <= 8'h0c; 
   PWDATA <= 16'h0600;        
   psel <= 1; //assert with clk rising edge
   pwrite <= 1;
 end
  #2;
  @(posedge clk) begin
    penable <= 1;         
  end 
  #2;
  @(posedge clk) begin
    penable <= 0;
    psel <= 0;
    pwrite <= 0;
  end
  #2
  //==========Data In===========
   @(posedge clk) begin 
   PADDR <= 4;  
   PWDATA <= 11'h34;
   psel <= 1; //assert with clk rising edge
   pwrite <= 1;
 end
  #2;
  @(posedge clk) begin
    penable <= 1;         
  end 
  #2;
  @(posedge clk) begin
    penable <= 0;
    psel <= 0;
    pwrite <= 0;
  end
  #2;
   //==========NOISE register===========
   @(posedge clk) begin 
   PADDR <= 8'h0c; 
   PWDATA <= 16'h0200;        
   psel <= 1; //assert with clk rising edge
   pwrite <= 1;
 end
  #2;
  @(posedge clk) begin
    penable <= 1;         
  end 
  #2;
  @(posedge clk) begin
    penable <= 0;
    psel <= 0;
    pwrite <= 0;
  end
  #2;
   //==========NOISE register===========
   @(posedge clk) begin 
   PADDR <= 8'h0c; 
   PWDATA <= 16'h0000;        
   psel <= 1; //assert with clk rising edge
   pwrite <= 1;
 end
  #2;
  @(posedge clk) begin
    penable <= 1;         
  end 
  #2;
  @(posedge clk) begin
    penable <= 0;
    psel <= 0;
    pwrite <= 0;
  end
  #2;
  #10; //================================================== 32 bit =====================
   //==========Codewidth register===========
   @(posedge clk) begin 
   PADDR <= 8; 
   PWDATA <= 2;        
   psel <= 1; //assert with clk rising edge
   pwrite <= 1;
 end
  #2;
  @(posedge clk) begin
    penable <= 1;         
  end 
  #2;
  @(posedge clk) begin
    penable <= 0;
    psel <= 0;
    pwrite <= 0;
  end
  #2
  
   //==========Control register===========
   @(posedge clk) begin 
   PADDR <= 0; 
   PWDATA <= 2;        
   psel <= 1; //assert with clk rising edge
   pwrite <= 1;
 end
  #2;
  @(posedge clk) begin
    penable <= 1;         
  end 
  #2;
  @(posedge clk) begin
    penable <= 0;
    psel <= 0;
    pwrite <= 0;
  end
  #2
   //==========NOISE register===========
   @(posedge clk) begin 
   PADDR <= 8'h0c; 
   PWDATA <= 32'h08000;        
   psel <= 1; //assert with clk rising edge
   pwrite <= 1;
 end
  #2;
  @(posedge clk) begin
    penable <= 1;         
  end 
  #2;
  @(posedge clk) begin
    penable <= 0;
    psel <= 0;
    pwrite <= 0;
  end
  #2
  //==========Data In===========
   @(posedge clk) begin 
   PADDR <= 4;  
   PWDATA <= 26'habcdef;
   psel <= 1; //assert with clk rising edge
   pwrite <= 1;
 end
  #2;
  @(posedge clk) begin
    penable <= 1;         
  end 
  #2;
  @(posedge clk) begin
    penable <= 0;
    psel <= 0;
    pwrite <= 0;
  end
  #2;
  //==========NOISE register===========
   @(posedge clk) begin 
   PADDR <= 8'h0c; 
   PWDATA <= 32'h08010;        
   psel <= 1; //assert with clk rising edge
   pwrite <= 1;
 end
  #2;
  @(posedge clk) begin
    penable <= 1;         
  end 
  #2;
  @(posedge clk) begin
    penable <= 0;
    psel <= 0;
    pwrite <= 0;
  end
  #2
  #2
  //==========Data In===========
   @(posedge clk) begin 
   PADDR <= 4;  
   PWDATA <= 26'h222222;
   psel <= 1; //assert with clk rising edge
   pwrite <= 1;
 end
  #2;
  @(posedge clk) begin
    penable <= 1;         
  end 
  #2;
  @(posedge clk) begin
    penable <= 0;
    psel <= 0;
    pwrite <= 0;
  end
  #2;
  //==========read===========
   @(posedge clk) begin 
   PADDR <= 4; 
   psel <= 1; //assert with clk rising edge
   pwrite <= 0;
 end
  #2;
  @(posedge clk) begin
    penable <= 1;         
  end 
  #2;
  @(posedge clk) begin
    penable <= 0;
    psel <= 0;
    pwrite <= 0;
  end
  #2;
*/
//================================================== 8 bit =====================
   //==========Codewidth register===========
   @(posedge clk) begin 
   PADDR <= 8; 
   PWDATA <= 0;        
   psel <= 1; //assert with clk rising edge
   pwrite <= 1;
 end
  #2;
  @(posedge clk) begin
    penable <= 1;         
  end 
  #2;
  @(posedge clk) begin
    penable <= 0;
    psel <= 0;
    pwrite <= 0;
  end
  #2
  
   //==========Control register===========
   @(posedge clk) begin 
   PADDR <= 0; 
   PWDATA <= 1;        
   psel <= 1; //assert with clk rising edge
   pwrite <= 1;
 end
  #2;
  @(posedge clk) begin
    penable <= 1;         
  end 
  #2;
  @(posedge clk) begin
    penable <= 0;
    psel <= 0;
    pwrite <= 0;
  end
  #2;
   
  //==========Data In===========
   @(posedge clk) begin 
   PADDR <= 4;  
   PWDATA <= 8'hb1;
   psel <= 1; //assert with clk rising edge
   pwrite <= 1;
 end
  #2;
  @(posedge clk) begin
    penable <= 1;         
  end 
  #2;
  @(posedge clk) begin
    penable <= 0;
    psel <= 0;
    pwrite <= 0;
  end
  #2;
   
  //==========read===========
   @(posedge clk) begin 
   PADDR <= 12; 
   psel <= 1; //assert with clk rising edge
   pwrite <= 0;
 end
  #2;
  @(posedge clk) begin
    penable <= 1;         
  end 
  #2;
  @(posedge clk) begin
    penable <= 0;
    psel <= 0;
    pwrite <= 0;
  end
  #2;
  
  
  
  
  #10; //================================================== 16 bit =====================
   //==========Codewidth register===========
   @(posedge clk) begin 
   PADDR <= 8; 
   PWDATA <= 1;        
   psel <= 1; //assert with clk rising edge
   pwrite <= 1;
 end
  #2;
  @(posedge clk) begin
    penable <= 1;         
  end 
  #2;
  @(posedge clk) begin
    penable <= 0;
    psel <= 0;
    pwrite <= 0;
  end
  #2;
  
   //==========Control register===========
   @(posedge clk) begin 
   PADDR <= 0; 
   PWDATA <= 1;        
   psel <= 1; //assert with clk rising edge
   pwrite <= 1;
 end
  #2;
  @(posedge clk) begin
    penable <= 1;         
  end 
  #2;
  @(posedge clk) begin
    penable <= 0;
    psel <= 0;
    pwrite <= 0;
  end
  #2;
   
  //==========Data In===========
   @(posedge clk) begin 
   PADDR <= 4;  
   PWDATA <= 16'h1a98;
   psel <= 1; //assert with clk rising edge
   pwrite <= 1;
 end
  #2;
  @(posedge clk) begin
    penable <= 1;         
  end 
  #2;
  @(posedge clk) begin
    penable <= 0;
    psel <= 0;
    pwrite <= 0;
  end
  #2;
  //==========read===========
   @(posedge clk) begin 
   PADDR <= 8; 
   psel <= 1; //assert with clk rising edge
   pwrite <= 0;
 end
  #2;
  @(posedge clk) begin
    penable <= 1;         
  end 
  #2;
  @(posedge clk) begin
    penable <= 0;
    psel <= 0;
    pwrite <= 0;
  end
  #2;
  
  //==========Data In===========
   @(posedge clk) begin 
   PADDR <= 4;  
   PWDATA <= 16'he789;
   psel <= 1; //assert with clk rising edge
   pwrite <= 1;
 end
  #2;
  @(posedge clk) begin
    penable <= 1;         
  end 
  #2;
  @(posedge clk) begin
    penable <= 0;
    psel <= 0;
    pwrite <= 0;
  end
  #2;
 

  #10; //================================================== 32 bit =====================
   //==========Codewidth register===========
   @(posedge clk) begin 
   PADDR <= 8; 
   PWDATA <= 2;        
   psel <= 1; //assert with clk rising edge
   pwrite <= 1;
 end
  #2;
  @(posedge clk) begin
    penable <= 1;         
  end 
  #2;
  @(posedge clk) begin
    penable <= 0;
    psel <= 0;
    pwrite <= 0;
  end
  #2
  
   //==========Control register===========
   @(posedge clk) begin 
   PADDR <= 0; 
   PWDATA <= 1;        
   psel <= 1; //assert with clk rising edge
   pwrite <= 1;
 end
  #2;
  @(posedge clk) begin
    penable <= 1;         
  end 
  #2;
  @(posedge clk) begin
    penable <= 0;
    psel <= 0;
    pwrite <= 0;
  end
  #2
   
  //==========Data In===========
   @(posedge clk) begin 
   PADDR <= 4;  
   PWDATA <= 32'h2af37be6;
   psel <= 1; //assert with clk rising edge
   pwrite <= 1;
 end
  #2;
  @(posedge clk) begin
    penable <= 1;         
  end 
  #2;
  @(posedge clk) begin
    penable <= 0;
    psel <= 0;
    pwrite <= 0;
  end
  #2;
  //==========Data In===========
   @(posedge clk) begin 
   PADDR <= 4;  
   PWDATA <= 32'h3af37ce6;
   psel <= 1; //assert with clk rising edge
   pwrite <= 1;
 end
  #2;
  @(posedge clk) begin
    penable <= 1;         
  end 
  #2;
  @(posedge clk) begin
    penable <= 0;
    psel <= 0;
    pwrite <= 0;
  end
  #2;
  //==========Data In===========
   @(posedge clk) begin 
   PADDR <= 4;  
   PWDATA <= 32'h1950c877;
   psel <= 1; //assert with clk rising edge
   pwrite <= 1;
 end
  #2;
  @(posedge clk) begin
    penable <= 1;         
  end 
  #2;
  @(posedge clk) begin
    penable <= 0;
    psel <= 0;
    pwrite <= 0;
  end
  #2;
  //==========read===========
   @(posedge clk) begin 
   PADDR <= 4; 
   psel <= 1; //assert with clk rising edge
   pwrite <= 0;
 end
  #2;
  @(posedge clk) begin
    penable <= 1;         
  end 
  #2;
  @(posedge clk) begin
    penable <= 0;
    psel <= 0;
    pwrite <= 0;
  end
  #2;
  //==========Data In===========
   @(posedge clk) begin 
   PADDR <= 4;  
   PWDATA <= 32'h1950c977;
   psel <= 1; //assert with clk rising edge
   pwrite <= 1;
 end
  #2;
  @(posedge clk) begin
    penable <= 1;         
  end 
  #2;
  @(posedge clk) begin
    penable <= 0;
    psel <= 0;
    pwrite <= 0;
  end
  #2;
  //==========Data In===========
   @(posedge clk) begin 
   PADDR <= 4;  
   PWDATA <= 32'h1a50c977;
   psel <= 1; //assert with clk rising edge
   pwrite <= 1;
 end
  #2;
  @(posedge clk) begin
    penable <= 1;         
  end 
  #2;
  @(posedge clk) begin
    penable <= 0;
    psel <= 0;
    pwrite <= 0;
  end
  #2;

end
endmodule // ECC_ENC_DEC_tb


